{"version":3,"sources":["pages/Overview.mdx","hooks/useForceUpdate.ts","components/RenderCounter.tsx","examples/components/ChildComponents.tsx","examples/components/AllComponents.tsx","pages/Components.mdx","examples/components/ClassComponent.tsx","pages/ClassComponent.mdx","examples/components/PureComponent.tsx","pages/PureComponent.mdx","examples/components/FunctionComponent.tsx","pages/FunctionComponent.mdx","pages/Hooks.mdx","pages/Functions.mdx","examples/context/ContextMemoized.tsx","examples/context/ContextSeparate.tsx","examples/context/ContextSelector.tsx","examples/context/ContextUnmemoized.tsx","pages/Context.mdx","pages/Immutability.mdx","app.tsx","components/mdx/index.ts","components/mdx/Code.tsx","serviceWorker.ts","index.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","isMDXComponent","useForceUpdate","React","useState","setIt","RenderCounter","memo","counter","useRef","current","style","borderStyle","borderWidth","borderColor","color","position","width","marginTop","marginBottom","right","top","background","fontFamily","padding","children","ChildClassComponent","this","value","Component","ChildClassComponentMemoized","nextProps","ChildPureComponent","PureComponent","ChildPureComponentMemoized","ChildFunctionComponent","ChildFunctionComponentMemoized","ComponentsContainer","ComponentsContainerMemoized","update","isMemoized","onClick","parentName","AllComponents","ClassComponentContainer","ClassComponentContainerMemoized","ClassComponent","PureComponentContainer","PureComponentContainerMemoized","FunctionComponentContainer","FunctionComponentContainerMemoized","FunctionComponent","Context","createContext","Provider","useMemo","JSON","stringify","Consumer","useContext","FooContext","BarContext","foo","bar","ConsumerFoo","ConsumerBar","count","setCount","useContextSelector","v","ContextUnmemoized","ContextMemoized","ContextSeparate","ContextSelector","App","className","to","Suspense","fallback","path","component","Components","Hooks","Functions","Immutability","exact","Overview","code","language","replace","defaultProps","theme","undefined","tokens","getLineProps","getTokenProps","map","line","i","key","token","Boolean","window","location","hostname","match","Typography","githubTheme","injectStyles","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80c6f3dc.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Overview`}</h2>\n    <p>{`The project is created to experiment with different approaches to use\nReact and create a list of do's, dont's, problematic approaches and best\npractice in terms of performance, readability, extensibility and\nmaintainability.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nconst useForceUpdate = () => {\n  const [, setIt] = React.useState<any>();\n\n  return () => setIt({});\n};\n\nexport default useForceUpdate;\n","import React from 'react';\n\ntype RenderCounterProps = {\n  children: React.ReactNode;\n  color: string;\n  style?: React.CSSProperties;\n};\n\nconst RenderCounter = React.memo<RenderCounterProps>(props => {\n  const counter = React.useRef<number>(0);\n  counter.current += 1;\n\n  return (\n    <div\n      style={{\n        ...props.style,\n        borderStyle: 'solid',\n        borderWidth: 3,\n        borderColor: props.color,\n        position: 'relative',\n        width: '70%',\n        marginTop: 4,\n        marginBottom: 4\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          background: 'black',\n          color: 'white',\n          fontFamily: 'monospace',\n          padding: 2\n        }}\n      >\n        Render count: {counter.current}\n      </div>\n      {props.children}\n    </div>\n  );\n});\n\nexport default RenderCounter;\n","import React, { Component, FunctionComponent, PureComponent } from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\nexport class ChildClassComponent extends Component<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentMemoized extends Component<TValue> {\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    return nextProps.value !== this.props.value;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponent extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentMemoized extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> = React.memo(\n  (props: TValue) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.value}\n      </RenderCounter>\n    );\n  }\n);\n\ntype TValue = {\n  value: number;\n};\n","import React, { Component } from 'react';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildClassComponentMemoized,\n  ChildFunctionComponentMemoized,\n  ChildPureComponentMemoized\n} from './ChildComponents';\n\nclass ComponentsContainer extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildClassComponent value={1} />\n        <ChildPureComponent value={1} />\n        <ChildFunctionComponent value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nclass ComponentsContainerMemoized extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildClassComponentMemoized value={1} />\n        <ChildPureComponentMemoized value={1} />\n        <ChildFunctionComponentMemoized value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nexport default (props: { isMemoized: boolean }) => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      {props.isMemoized ? (\n        <ComponentsContainerMemoized />\n      ) : (\n        <ComponentsContainer />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport AllComponents from '../examples/components/AllComponents.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Components`}</h2>\n    <p><inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <h3>{`Normal`}</h3>\n    <AllComponents isMemoized={false} mdxType=\"AllComponents\" />\n    <h3>{`Memoized`}</h3>\n    <AllComponents isMemoized={true} mdxType=\"AllComponents\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { Component } from 'react';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildClassComponentMemoized\n} from './ChildComponents';\n\nclass ClassComponentContainer extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildClassComponent value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nclass ClassComponentContainerMemoized extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildClassComponentMemoized value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nexport default (props: { isMemoized: boolean }) => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      {props.isMemoized ? (\n        <ClassComponentContainerMemoized />\n      ) : (\n        <ClassComponentContainer />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport ClassComponent from '../examples/components/ClassComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Class Component`}</h2>\n    <p><inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <h3>{`Normal`}</h3>\n    <ClassComponent isMemoized={false} mdxType=\"ClassComponent\" />\n    <h3>{`Memoized`}</h3>\n    <ClassComponent isMemoized={true} mdxType=\"ClassComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { Component } from 'react';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildPureComponentMemoized\n} from './ChildComponents';\n\nclass PureComponentContainer extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildPureComponent value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nclass PureComponentContainerMemoized extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildPureComponentMemoized value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nexport default (props: { isMemoized: boolean }) => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      {props.isMemoized ? (\n        <PureComponentContainerMemoized />\n      ) : (\n        <PureComponentContainer />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport PureComponent from '../examples/components/PureComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Pure Component`}</h2>\n    <p><inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <h3>{`Normal`}</h3>\n    <PureComponent isMemoized={false} mdxType=\"PureComponent\" />\n    <h3>{`Memoized`}</h3>\n    <PureComponent isMemoized={true} mdxType=\"PureComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { Component } from 'react';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildFunctionComponentMemoized\n} from './ChildComponents';\n\nclass FunctionComponentContainer extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildFunctionComponent value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nclass FunctionComponentContainerMemoized extends Component {\n  render() {\n    return (\n      <RenderCounter color=\"black\">\n        <p>Container</p>\n        <ChildFunctionComponentMemoized value={1} />\n      </RenderCounter>\n    );\n  }\n}\n\nexport default (props: { isMemoized: boolean }) => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      {props.isMemoized ? (\n        <FunctionComponentContainerMemoized />\n      ) : (\n        <FunctionComponentContainer />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport FunctionComponent from '../examples/components/FunctionComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Function Component`}</h2>\n    <p><inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <h3>{`Normal`}</h3>\n    <FunctionComponent isMemoized={false} mdxType=\"FunctionComponent\" />\n    <h3>{`Memoized`}</h3>\n    <FunctionComponent isMemoized={true} mdxType=\"FunctionComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Hooks`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Functions`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = props => {\n  const value = React.useMemo(() => ({ value: 1 }), []);\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = number;\n\nconst FooContext = React.createContext<ContextValue>(0);\nconst BarContext = React.createContext<ContextValue>(0);\n\nconst Provider: React.FC<{ foo: number; bar: number }> = props => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <FooContext.Provider value={foo}>\n        <BarContext.Provider value={bar}>\n          <div>\n            <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n          </div>\n          <div>{props.children}</div>\n        </BarContext.Provider>\n      </FooContext.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = React.useContext(FooContext);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>ConsumerFoo: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = React.useContext(BarContext);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>ConsumerBar: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\nimport { createContext, useContextSelector } from 'use-context-selector';\n\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = { foo: number; bar: number };\n\nconst Context = createContext<ContextValue>({ foo: 0, bar: 0 });\n\nconst Provider: React.FC<{ foo: number; bar: number }> = props => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={{ foo, bar }}>\n        <div>\n          <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, v => v.foo);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>ConsumerFoo: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, v => v.bar);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>ConsumerBar: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = props => {\n  const value = { value: 1 };\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport ContextMemoized from '../examples/context/ContextMemoized';\nimport ContextSeparate from '../examples/context/ContextSeparate';\nimport ContextSelectorExample from '../examples/context/ContextSelector';\nimport ContextUnmemoizedExample from '../examples/context/ContextUnmemoized';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Context`}</h2>\n    <p>{`This page covers only modern React Context API, i.e. `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}><inlineCode parentName=\"a\">{`createContext()`}</inlineCode></a>{`.`}</p>\n    <h3>{`Context behavior`}</h3>\n    <p>{`All consumers that are descendants of a `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` will re-render whenever the `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`’s `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop changes. The propagation from `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` to its descendant consumers (including `}<inlineCode parentName=\"p\">{`.contextType`}</inlineCode>{` on class components and `}<inlineCode parentName=\"p\">{`useContext()`}</inlineCode>{` hook) is not subject to the `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` method or `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode>{`, so the consumer is updated even when an ancestor component skips an update.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// 💡 React.memo will ignored\nconst Example = React.memo(props => {\n  // 💣 Updates will be triggered inside\n  const value = React.useContext(Context);\n\n  return <div />;\n});\n`}</code></pre>\n    <p>{`For example the code below will trigger rerender always as `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{` object will be always newly created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children } = props;\n  // ⛔ ({ value: 1 } === { value: 1 }) is false, so reference is different\n  const context = { value: 1 };\n\n  return <Provider value={context}>{children}</Provider>;\n};\n`}</code></pre>\n    <ContextUnmemoizedExample mdxType=\"ContextUnmemoizedExample\" />\n    <h3>{`Solution 1: Use memoized context value`}</h3>\n    <p>{`If value is changing rarely is good option to memoize an object value with `}<inlineCode parentName=\"p\">{`useMemo()`}</inlineCode>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children, value } = props;\n  // ✅ Now new \\`context\\` will be recreated only on \\`value\\` change\n  const context = React.useMemo(() => ({ value }), [value]);\n\n  return <Provider value={context}>{children}</Provider>;\n};\n`}</code></pre>\n    <ContextMemoized mdxType=\"ContextMemoized\" />\n    <p>{`For class components you can use `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class Example extends React.Component {\n  render() {\n    return <Provider value={this.state}>{children}</Provider>;\n  }\n}\n`}</code></pre>\n    <h3>{`Solution 2: Use separate contexts`}</h3>\n    <p>{`This trick was `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/how-to-use-react-context-effectively\"\n      }}>{`described`}</a>{` by Kent Dodds. Idea is to pass plain/memoized\nvalues in separate contexts to avoid useless notifications to subscribers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children } = props;\n\n  // ❗ both values are plain and safe for shallow compare\n  const firstValue = 1;\n  const secondValue = 2;\n\n  return (\n    <FirstProvider value={firstValue}>\n      <SecondProvider value={secondValue}>{children}</SecondProvider>\n    </FirstProvider>\n  );\n};\n`}</code></pre>\n    <ContextSeparate mdxType=\"ContextSeparate\" />\n    <h3>{`Solution 3: Experimental bits API`}</h3>\n    <p>{`React provides an expiremental API with `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function createContext<T>(defaultValue: T, calculateChangedBits?: (prev: T, next: T) => number): Context<T>;\nfunction useContext<T>(context: Context<T>, observedBits?: number|boolean): T;\n`}</code></pre>\n    <p>{`Which allows to change default behavior of Context API and avoid useless rerenders. As it's experimental there are no official docs yet, check `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\"\n      }}>{`this article`}</a>{` to get more details.`}</p>\n    <p><inlineCode parentName=\"p\">{`changedBits === 0`}</inlineCode>{` has a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/react/blob/9b0bd43550206e04bfe9ca695e5981eff0e2d03f/packages/react-reconciler/src/ReactFiberBeginWork.js#L2304\"\n      }}>{`special handling`}</a>{` in `}<inlineCode parentName=\"p\">{`react-reconciler`}</inlineCode>{`, so the simplest and interesting trick is to disable any consumer's updates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ☠️ Even is \\`value\\` will change updates will be silenced\nconst Context = React.createContext(value, () => 0);\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/use-context-selector\"\n      }}><inlineCode parentName=\"a\">{`use-context-selector`}</inlineCode></a>{` uses `}<inlineCode parentName=\"p\">{`changedBits === 0`}</inlineCode>{` to implement selector-like API for hooks which currently stays as an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/rfcs/pull/119\"\n      }}>{`open RFC`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = React.memo(props => {\n  // ✅ Updates of other context properties will be ignored\n  const locale = useContextSelector(LocaleContext, v => v.locale);\n\n  return <div>Current locale is {locale}.</div>;\n});\n`}</code></pre>\n    <ContextSelectorExample mdxType=\"ContextSelectorExample\" />\n    <p>{`There is also a lot of custom context/global state implementations, comparison\nfor Concurrent mode `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-mode\"\n      }}>{`available there`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`State Immutability in React, why it is important, and how to achieve it using Immer`}</h2>\n    <p>{`React `}<em parentName=\"p\">{`props`}</em>{` and `}<em parentName=\"p\">{`state`}</em>{` are readonly by contract; it is, however, very easy to break this contract\nand introduce issues that are difficult to debug. In order to prevent these issues it is advised not\nto mutate state unless necessary. If non-trivial mutation of the current state is unvoidable, it is\nadvised to use an immutability helper called Immer.`}</p>\n    <p>{`In the text below we start with a piece of code\nthat doesn't work, we transform it into code that works, but is error-prone and unreadable, and eventually\nwe reach the state of well readable and easily maintainable code. As we go over these phases\nwe gradually build a case for using Immer.`}</p>\n    <h3>{`State mutation outside of setState mechanism`}</h3>\n    <p>{`React `}<em parentName=\"p\">{`state`}</em>{` is declared readonly, but that only means that the `}<em parentName=\"p\">{`reference`}</em>{` to it is constant. This\neffectively protects primitives from being changed, but it doesn't protect objects. The only sound\nmeans of state change in React is the `}<em parentName=\"p\">{`setState`}</em>{` method and any code that asserts it is correct in doing so.\nIn the example below, the `}<em parentName=\"p\">{`sumData`}</em>{` function rightfully asserts that the state object will not change\nand based on that it caches its output based on the state object's internal field \"data\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const data = state.data;\n  const sumData = React.useCallback(\n    () => data.reduce((acc, val) => acc + val, 0),\n    [data]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is out of sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({ data: state.data });\n  };\n`}</code></pre>\n    <p>{`However, the `}<em parentName=\"p\">{`run`}</em>{` function changes the state object -- its internal field `}<em parentName=\"p\">{`data`}</em>{` now points to a\ndifferent address. `}<em parentName=\"p\">{`sumData`}</em>{` captures the original address (that wasn't supposed to change), and therefore\nit will sum the original data.`}</p>\n    <p>{`The logical step in rectifying this seems to be to make `}<em parentName=\"p\">{`sumData`}</em>{` capture the entire state -- since it is\nreadonly we will be sure that we always refer to the correct address. It also seemingly makes sense not to construct\na new state object in `}<em parentName=\"p\">{`run`}</em>{` since we only change a single field inside of it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is in sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState(state);\n  };\n`}</code></pre>\n    <p>{`The issue with this change is that now it doesn't work at all, because React asserts that since the\naddress of the state object hasn't changed, the object itself hasn't changed, and it will ignore the\nsetState call. The obvious solution is to copy the object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    state.data = [1, 1];\n    // Contract violation.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({...state});\n  };\n`}</code></pre>\n    <p>{`Now the code will work. The issue with this code, however, is that it is breaking the immutability contract\nwith React and that it is prone to error. If the state object were to consist of multiple nested fields,\nwe would have to make sure that the object is copied properly to form a new state. Since there is no native\nconcept of \"deep copy\" in javascript, doing this can be rather cumbersome:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    // It is easy to get lost in this sea of spread operators and brackets.\n    setState(prevState => ({\n      people: [\n        { ...prevState.people[0] },\n        {\n          ...prevState.people[1],\n          addresses: [\n            {\n              ...prevState.people[1].addresses[0],\n              street: \\`Street \\${Math.random()}\\`\n            }\n          ]\n        }\n      ]\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <h3>{`Immer.js to the rescue`}</h3>\n    <p>{`And that is when Immer.js comes to the rescue. Immer.js uses ES6 proxies (note that when transcompiled to ES5\nit will become much slower) to record changes to a so called `}<em parentName=\"p\">{`draft`}</em>{` object during the execution of the `}<em parentName=\"p\">{`produce`}</em>{`\nfunction and then project them onto a new object that becomes the new state. The `}<em parentName=\"p\">{`draft`}</em>{` object is based on the existing\nstate that is passed to the `}<em parentName=\"p\">{`produce`}</em>{` function along with the draft callback. The following snippet demonstrates\nhow we go from cumbersome, ugly, and ureadable to straightforward, beautiful, and well readable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(\n      produce(state, _draft => {\n        _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`This can be further simplified by using the `}<em parentName=\"p\">{`use-immer`}</em>{` npm package that provides us with a hook\nthat combines the native `}<em parentName=\"p\">{`React.useState`}</em>{` and Immer's `}<em parentName=\"p\">{`produce`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = useImmer(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(_draft => {\n      _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`In the newly created state, fields that didn't change during the execution of the draft callback\nwill be referentially equal to the fields in the original state. Only fields that were changed\nin the draft and the root object will be new objects.`}</p>\n    <h3>{`Resources`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://immerjs.github.io/immer/docs/introduction\"\n        }}>{`https://immerjs.github.io/immer/docs/introduction`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Overview from './pages/Overview.mdx';\nimport Components from './pages/Components.mdx';\nimport ClassComponent from './pages/ClassComponent.mdx';\nimport PureComponent from './pages/PureComponent.mdx';\nimport FunctionComponent from './pages/FunctionComponent.mdx';\nimport Hooks from './pages/Hooks.mdx';\nimport Functions from './pages/Functions.mdx';\nimport Context from './pages/Context.mdx';\nimport Immutability from './pages/Immutability.mdx';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <header>\n          <h1>React Patterns</h1>\n        </header>\n        <div className=\"main\">\n          <aside>\n            <ul>\n              <li>\n                <Link to=\"/\">Overview</Link>\n              </li>\n              <li>\n                <Link to=\"/components\">Components</Link>\n                <ul>\n                  <li>\n                    <Link to=\"/class-component\">Class Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/pure-component\">Pure Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/function-component\">Function Component</Link>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <Link to=\"/hooks\">Hooks</Link>\n              </li>\n              <li>\n                <Link to=\"/context\">Context</Link>\n              </li>\n              <li>\n                <Link to=\"/functions\">Functions</Link>\n              </li>\n              <li>\n                <Link to=\"/immutability\">Immutability</Link>\n              </li>\n            </ul>\n          </aside>\n          <main>\n            <React.Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route path=\"/components\" component={Components} />\n                <Route path=\"/class-component\" component={ClassComponent} />\n                <Route path=\"/pure-component\" component={PureComponent} />\n                <Route\n                  path=\"/function-component\"\n                  component={FunctionComponent}\n                />\n                <Route path=\"/hooks\" component={Hooks} />\n                <Route path=\"/context\" component={Context} />\n                <Route path=\"/functions\" component={Functions} />\n                <Route path=\"/immutability\" component={Immutability} />\n                <Route exact path=\"/\" component={Overview} />\n              </Switch>\n            </React.Suspense>\n          </main>\n        </div>\n        <footer>\n          &copy; 2019, Sergii Mykhailov. <Link to=\"/\">React Patterns</Link>\n        </footer>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import Code from './Code';\n\nexport default {\n  code: Code\n};\n","import Highlight, { defaultProps, Language } from 'prism-react-renderer';\nimport React from 'react';\n\nimport 'prism-themes/themes/prism-vs.css';\n\n// TODO: use typings when MDX2 will be released\ntype CodeProps = {\n  className?: string;\n  children?: string;\n};\n\nconst Code: React.FC<CodeProps> = props => {\n  const { className = 'language-jsx', children = '' } = props;\n  const language: Language = className.replace('language-', '') as any;\n  const code = children.replace(/\\n$/, '');\n\n  return (\n    <>\n      {/* CSS fix for empty lines */}\n      <style>{`.prism-code .token.plain { display: inline-block; }`}</style>\n      <style>{`.prism-code .token.comment { font-style: normal; }`}</style>\n\n      <Highlight\n        {...defaultProps}\n        code={code}\n        language={language}\n        theme={undefined} // CSS theme is used\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={{ ...style, padding: 3 }}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </>\n  );\n};\n\nexport default Code;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @ts-ignore\nimport { MDXProvider } from '@mdx-js/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Typography from 'typography';\n// @ts-ignore\nimport githubTheme from 'typography-theme-github';\n\nimport App from './app';\nimport components from './components/mdx';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst typography = new Typography(githubTheme);\ntypography.injectStyles();\n\nReactDOM.render(\n  <MDXProvider components={components}>\n    <App />\n  </MDXProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}